name: CI

on:
  push:
    branches:
      - "**"
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'

jobs:

  test-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install go dependencies
        run: make install-go-dependencies
      - name: Run tests
        run: make backend-test

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.22.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.22.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: test frontend
        run: make frontend-test

  build-plugin-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install go dependencies
        run: make install-go-dependencies
      - name: build all versions
        run: make build-backend-all
      - name: Upload linux binaries
        uses: actions/upload-artifact@v2
        with:
          name: plugin-executables
          path: ./dist/

  test-selenium-local:
    if: ${{ startsWith( github.ref, 'refs/heads/' ) }}
    runs-on: ubuntu-latest
    needs:
      - test-backend
      - test-frontend
      - build-plugin-backend

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Use Node.js 12.22.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.22.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Download plugin backend
        uses: actions/download-artifact@v2
        with:
          name: plugin-executables
          path: ./dist/
      - name: Build frontend
        run: make build-frontend
      - name: fixe file permissions
        run: chmod +x ./dist/gpx_*
      - name: Run Selenium Tests
        run: make selenium-test-no-build
      - name: Debug Logs
        if: ${{ failure() }}
        run: docker-compose logs grafana

  create-artifacts:
    if: ${{ startsWith( github.ref, 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    needs:
      - build-plugin-backend

    steps:
      - uses: actions/checkout@v2
      - name: Get metadata about the plugin
        id: metadata
        run: |
          export PLUGIN_VERSION=${GITHUB_REF#refs/tags/v}
          export PLUGIN_ARTIFACT=frser-sqlite-datasource-${PLUGIN_VERSION}.zip
          echo "::set-output name=version::${PLUGIN_VERSION}"
          echo "::set-output name=archive::${PLUGIN_ARTIFACT}"
      - name: Use Node.js 12.22.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.22.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Download plugin backend
        uses: actions/download-artifact@v2
        with:
          name: plugin-executables
          path: ./dist/
      - name: Build frontend
        run: |
          npm version ${{ steps.metadata.outputs.version }} --no-git-tag-version
          make build-frontend
      - name: package-and-zip
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: make package-and-zip
      - name: Upload plugin package
        uses: actions/upload-artifact@v2
        with:
          name: plugin-package
          path: ${{ steps.metadata.outputs.archive }}

  # testing on macos and windows is currently not done as docker is not available on the runners
  test-selenium-release-linux:
    runs-on: ubuntu-latest
    needs:
      - create-artifacts

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get metadata about the plugin
        id: metadata
        run: |
          export PLUGIN_VERSION=${GITHUB_REF#refs/tags/v}
          export PLUGIN_ARTIFACT=frser-sqlite-datasource-${PLUGIN_VERSION}.zip
          echo "::set-output name=version::${PLUGIN_VERSION}"
          echo "::set-output name=archive::${PLUGIN_ARTIFACT}"
      - name: Download plugin package
        uses: actions/download-artifact@v2
        with:
          name: plugin-package
          path: ./
      - name: unzip plugin
        run: unzip ${{ steps.metadata.outputs.archive }} && mv frser-sqlite-datasource dist
      - name: update Grafana config to production values
        run: | 
          sed -i 's/allow_loading_unsigned_plugins = true//g' grafana_config/grafana.ini
          sed -i 's/app_mode = development/app_mode = production/g' grafana_config/grafana.ini          
      - name: Use Node.js 12.22.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.22.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-modules-
            ${{ runner.OS }}-
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Run Selenium Tests
        run: make selenium-test-no-build
      - name: Debug Logs
        if: ${{ failure() }}
        run: docker-compose logs grafana

  create-release:
    runs-on: ubuntu-latest
    needs:
      - test-selenium-release-linux

    steps:
      - uses: actions/checkout@v2
      - name: Get metadata about the plugin
        id: metadata
        run: |
          export PLUGIN_VERSION=${GITHUB_REF#refs/tags/v}
          export PLUGIN_ARTIFACT=frser-sqlite-datasource-${PLUGIN_VERSION}.zip
          echo "::set-output name=version::${PLUGIN_VERSION}"
          echo "::set-output name=archive::${PLUGIN_ARTIFACT}"
      - name: Check changelog
        run: |
          if ! grep -q -F "## [${{ steps.metadata.outputs.version }}]" CHANGELOG.md; then
            echo "Error: The latest (## [${{ steps.metadata.outputs.version }}]) tag was not found in the CHANGELOG.md." 1>&2
            exit 1
          fi
      - name: Download plugin package
        uses: actions/download-artifact@v2
        with:
          name: plugin-package
          path: ./
      - name: create md5 hash
        run: |
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive }}.md5
      - name: Set release notes
        id: set_release_notes
        run: |
          sed 's/$VERSION/${{ steps.metadata.outputs.version }}/g' release_template.md > release_notes.md

          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > changelog_extract.md
          # skip the first two lines
          tail -n +3 changelog_extract.md >> release_notes.md

          echo "::set-output name=path::release_notes.md"
      - name: Check prerelease
        id: check_prerelease
        run: |
          if [[ ${{ github.ref }} =~ "rc" ]]; then
            echo "::set-output name=is_prerelease::true"
          else
            echo "::set-output name=is_prerelease::false"
          fi
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ steps.set_release_notes.outputs.path }}
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
      - name: Add plugin to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}
          asset_name: ${{ steps.metadata.outputs.archive }}
          asset_content_type: application/zip
      - name: Add checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}.md5
          asset_name: ${{ steps.metadata.outputs.archive }}.md5
          asset_content_type: text/plain
